#!/usr/bin/env bash

# sway_switch_theme
#
# Description: change theme on SwayWM
# Author: demingongo
# Link: https://github.com/demingongo
# Availability: https://github.com/demingongo/sway-dotfiles

SWAY_DIR="$HOME/.config/sway"
SWAY_THEMES_DIR="$SWAY_DIR/themes"
THEMES_FILE="$SWAY_THEMES_DIR/themes.txt" 

WAYBAR_DIR="$HOME/.config/waybar"
WAYBAR_THEMES_DIR="$WAYBAR_DIR/themes"

EWW_DIR="$HOME/.config/eww"
EWW_THEMES_DIR="$EWW_DIR/themes"

ALL_THEMES=()

while read -r line
do
	[[ -z "$line" ]] && break || ALL_THEMES=(${ALL_THEMES[@]} "$line")
done < "$THEMES_FILE"

is_interactive=false


# parse options
KEEPBG_OPT=false

opts=$(getopt --longoptions=keepbg --name "$0" --options "" -- "$@")
eval set -- $opts
unset opts

while [[ $# -gt 0 ]]; do
	case "$1" in
		"--keepbg")
			KEEPBG_OPT=true
			shift 1
			;;
		"--")
			shift
			break
			;;
		*)
			echo "Error $1" >&2
			exit 1
			;;
	esac
done

if [ $# -eq 0 ]; then
	is_interactive=true
	gum style \
		--foreground 212 --border-foreground 212 --border double \
		--align center --width 50 --margin "1 2" --padding "2 4" \
		'SWAY DOTFILES' 'by demingongo'

	echo "Select a theme:"
	
	choices=""
	for i in ${!ALL_THEMES[@]}; do
  		if [ $i -eq 0 ]; then
			choices="${ALL_THEMES[$i]}"
		else
			choices="""$choices
${ALL_THEMES[$i]}"""
  		fi
	done

	theme=$(echo "$choices" | gum choose --item.faint)
	[[ " ${ALL_THEMES[*]} " =~ " $theme " ]] && theme="$theme" || exit 1
else
	[[ " ${ALL_THEMES[*]} " =~ " $1 " ]] && theme=$1 || exit 1	
fi

# colorscheme
if [[ -n $2 ]]; then
	colorscheme=$2
else
	colorscheme='default'
fi
if [[ "$colorscheme" != 'default' ]] && [[ -n "$colorscheme" ]]; then
	SWAY_THEME_COLORSCHEME_DIR="$SWAY_THEMES_DIR/$theme/colorschemes/$colorscheme"
	WAYBAR_THEME_COLORSCHEME_STYLE="$WAYBAR_THEMES_DIR/$theme/colorschemes/$colorscheme.css"
	EWW_THEME_COLORSCHEME_STYLE="$EWW_THEMES_DIR/$theme/colorschemes/$colorscheme.scss"
fi

# Handle existing file. 
# Returns second arg if file does not exist
function Eval_file()
{
	if [[ -n "$1" ]] && [ -f "$1" ]; then
		echo "$1"
	else
		echo "$2"
	fi
}

# Handle config files
Load_config()
{
	source_file=$1
	dest_file=$2
	default_content=$3
	default_content_file=$4

	# remove old backup file (to avoid overwriting symbolic link)
	rm -f "$dest_file~"


	if [ -f "$source_file" ]; then
		ln -s -b "$source_file" "$dest_file"		
	else
		if [ -f "$dest_file" ]; then
			cp "$dest_file" "$dest_file~"
		fi
		rm -f "$dest_file"
		if [ -f "$default_content_file" ]; then
			ln -s -b "$default_content_file" "$dest_file"
		else
			echo "$default_content" > "$dest_file"
		fi
	fi
}


if [[ -n "$theme" ]]; then
	[ "$is_interactive" = true ] && gum spin --spinner line --title "$theme" -- sleep 1

	# load theme
	content="""set \$theme $theme
set \$theme_dir \$HOME/.config/sway/themes/\$theme
include ./colorscheme
include ./themes/\$theme/init
"""
	echo "$content" > "$SWAY_DIR/theme"

	# Load colorscheme
	echo "set \$colorscheme $colorscheme" > "$SWAY_DIR/colorscheme"
	
	# load waybar
	WAYBAR_CONFIG="$WAYBAR_DIR/config"
	WAYBAR_STYLE="$WAYBAR_DIR/style.css"
	
	WAYBAR_THEME_CONFIG="$WAYBAR_THEMES_DIR/$theme/config"
	WAYBAR_THEME_STYLE=$(Eval_file "$WAYBAR_THEME_COLORSCHEME_STYLE" "$WAYBAR_THEMES_DIR/$theme/style.css")

	rm -f "$WAYBAR_CONFIG"
	rm -f "$WAYBAR_STYLE"
	
	if [ -f "$WAYBAR_THEME_CONFIG" ]; then
		ln -s -b "$WAYBAR_THEME_CONFIG" "$WAYBAR_CONFIG"
	fi
	if [ -f "$WAYBAR_THEME_STYLE" ]; then
		ln -s -b "$WAYBAR_THEME_STYLE" "$WAYBAR_STYLE"
	fi

	# load eww
	EWW_STYLE="$EWW_DIR/theme.scss"
	EWW_THEME_STYLE="$EWW_THEMES_DIR/$theme/style.scss"
	EWW_DEFAULT_STYLE="$EWW_THEMES_DIR/default/style.scss"
	
	if [ -f "$EWW_THEME_COLORSCHEME_STYLE" ]; then
		echo "@import './themes/$theme/colorschemes/$colorscheme.scss'" > "$EWW_STYLE"
	elif [ -f "$EWW_THEME_STYLE" ]; then
		echo "@import './themes/$theme/style.scss'" > "$EWW_STYLE"
	elif [ -f "$EWW_DEFAULT_STYLE" ]; then
		echo "@import './themes/default/style.scss'" > "$EWW_STYLE"
	fi
	if command -v "eww" &> /dev/null
	then
		eww reload
	fi

	# load config
	CONFIG_DIR="$HOME/.config/sway/settings"
	mkdir -p "$CONFIG_DIR"
	

	# load zsh config
	ZSH_COLORSCHEMED=''
	if [[ -n "$SWAY_THEME_COLORSCHEME_DIR" ]]; then
		ZSH_COLORSCHEMED="$SWAY_THEME_COLORSCHEME_DIR/config/zshrc.conf"
	fi
	ZSH_CONF=(
    		# source
		$(Eval_file "$ZSH_COLORSCHEMED" "$SWAY_DIR/themes/$theme/config/zshrc.conf")
		# destination
		"$CONFIG_DIR/zshrc.conf"
		# default content
		"# User configuration"
		# default content file
		"$CONFIG_DIR/zshrc.default.conf"
	)
	Load_config "${ZSH_CONF[0]}" "${ZSH_CONF[1]}" "${ZSH_CONF[2]}" "${ZSH_CONF[3]}"
	
	# load nvim config
	NVIM_COLORSCHEMED=''
	if [[ -n "$SWAY_THEME_COLORSCHEME_DIR" ]]; then
		NVIM_COLORSCHEMED="$SWAY_THEME_COLORSCHEME_DIR/config/nvim-theme.vim"
	fi
	NVIM_CONF=(
		# source
		$(Eval_file "$NVIM_COLORSCHEMED" "$SWAY_DIR/themes/$theme/config/nvim-theme.vim")
		# destination
		"$CONFIG_DIR/nvim-theme.vim"
		# default content
		"\"\"\" Load theme"
		# default content file
		"$CONFIG_DIR/nvim-theme.default.vim"
	)
	Load_config "${NVIM_CONF[0]}" "${NVIM_CONF[1]}" "${NVIM_CONF[2]}" "${NVIM_CONF[3]}"

        # load cava config
	CAVA_COLORSCHEMED=''
	if [[ -n "$SWAY_THEME_COLORSCHEME_DIR" ]]; then
		CAVA_COLORSCHEMED="$SWAY_THEME_COLORSCHEME_DIR/config/cava.conf"
	fi
	CAVA_CONF=(
    		# source
		$(Eval_file "$CAVA_COLORSCHEMED" "$SWAY_DIR/themes/$theme/config/cava.conf")
		# destination
		"$CONFIG_DIR/cava.conf"
		# default content
		"; cava.conf"
		# default content file
		"$CONFIG_DIR/cava.default.conf"
	)
	Load_config "${CAVA_CONF[0]}" "${CAVA_CONF[1]}" "${CAVA_CONF[2]}" "${CAVA_CONF[3]}"

	# load mako config
	MAKO_COLORSCHEMED=''
	if [[ -n "$SWAY_THEME_COLORSCHEME_DIR" ]]; then
		MAKO_COLORSCHEMED="$SWAY_THEME_COLORSCHEME_DIR/config/mako.conf"
	fi
	MAKO_CONF=(
    		# source
		$(Eval_file "$MAKO_COLORSCHEMED" "$SWAY_DIR/themes/$theme/config/mako.conf")
		# destination
		"$CONFIG_DIR/mako.conf"
		# default content
		"# mako config"
		# default content file
		"$CONFIG_DIR/mako.default.conf"
	)
	Load_config "${MAKO_CONF[0]}" "${MAKO_CONF[1]}" "${MAKO_CONF[2]}" "${MAKO_CONF[3]}"

	# kill wallpaper process'
	if [ "$KEEPBG_OPT" = false ]; then
		pkill swaybg
		pkill mpvpaper
	fi

	# restart wm
	sway reload > /dev/null 2>&1 &
	[ "$is_interactive" = true ] && echo "  $theme"

	# reload mako daemon
	if command -v "makoctl" &> /dev/null
	then
		makoctl reload
	fi
fi
