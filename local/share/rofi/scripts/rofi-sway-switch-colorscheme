#!/usr/bin/env bash

# rofi-sway-switch-colorscheme
#
# Description: change colorscheme of SwayWM theme
# Author: demingongo
# Link: https://github.com/demingongo
# Availability: https://github.com/demingongo/sway-dotfiles

set -e

## init

# .ini file parser (https://github.com/DevelopersToolbox/ini-file-parser.git)
INI_PARSER="$HOME/.local/share/ini-file-parser/src/ini-file-parser.sh"

# script that will change the wallpaper
SWITCHER_CMD="$HOME/.local/bin/sway_switch_theme"

# config file path
CONFIG_FILE_PATH=''

# parse options
opts=$(getopt --longoptions=config: --name "$0" --options "" -- "$@")
eval set -- $opts
unset opts

while [[ $# -gt 0 ]]; do
	case "$1" in
		"--config")
            		CONFIG_FILE_PATH="$2"
            		shift 2
            		;;
        	"--")
	  	        shift
	            	break
        		;;
        	*)
			echo "Error $1" >&2
			exit 1
            		;;
    esac
done

# validate options
if [ -z "$CONFIG_FILE_PATH" ]; then
	echo "Missing option: \"--config <path/to/config/file>\"" >&2
	exit 1
fi

## process ini file

source $INI_PARSER

process_ini_file "$CONFIG_FILE_PATH"

theme_name=$(get_value 'main' 'name')

if [[ -z "$theme_name" ]]; then
	echo "Missing main.name (theme name) in: \"$CONFIG_FILE_PATH\"" >&2
	exit 1
fi

declare -A colorschemes
declare -a orders
declare -A texts
declare -A cmds

function load_colorschemes()
{
    local section=''
    local keys=''
    local values=''

    section=$(process_section_name 'colorschemes')

    eval "keys=( \"\${${section}_keys[@]}\" )"
    eval "values=( \"\${${section}_values[@]}\" )"

    for i in "${!keys[@]}"; do
	orig=$(unescape_string "${values[$i]}")
	colorschemes["${keys[$i]}"]="${orig}"
    done
}

load_colorschemes

if [ $# -gt 0 ]
then
    # If arguments given, use those as the selection
    selection="${@}"
fi

# Don't allow custom entries
echo -e "\0no-custom\x1ftrue"
# Use markup
echo -e "\0markup-rows\x1ftrue"

if [ -z "${selection+x}" ]
then
    echo -e "\0prompt\x1fSelect a colorscheme"
    echo -e "default"
    for i in "${!colorschemes[@]}"
    do
        echo -e "${colorschemes[$i]}"
    done
else
    # Change colorscheme
    if [ "$selection" = 'default' ]; then
	    found_scheme='default'
    else
    	for key in "${!colorschemes[@]}"
    	do
		if [ "$selection" = "${colorschemes[$key]}" ]; then
			found_scheme="$key"
			break
		fi
    	done
    fi

    if [ -n "${found_scheme+x}" ]
    then
	    eval "$SWITCHER_CMD $theme_name \"$found_scheme\" --keepbg"
	    exit 0
    fi

    echo "Invalid: $selection" >&2
    exit 1
fi

